{"ast":null,"code":"var _jsxFileName = \"/home/leonardo/\\xC1rea de Trabalho/Repositorios/sd-016-b-project-trybetunes/src/pages/Album.jsx\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport Loading from '../components/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Album extends Component {\n  constructor() {\n    super();\n    this.state = {\n      musics: undefined,\n      loading: false,\n      favoriteSongs: []\n    };\n    this.isFavorite = this.isFavorite.bind(this); // this.setMusics = this.setMusics.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.setStates();\n  }\n\n  async setStates() {\n    const {\n      match\n    } = this.props;\n    const {\n      params\n    } = match;\n    const {\n      id\n    } = params;\n    const musics = await getMusics(id);\n    this.setState({\n      musics\n    });\n    this.setState({\n      loading: true\n    });\n    const favorites = await getFavoriteSongs();\n    this.setState({\n      favoriteSongs: favorites,\n      loading: false\n    });\n  }\n\n  isFavorite(trackId) {\n    const {\n      favoriteSongs\n    } = this.state;\n    return favoriteSongs ? favoriteSongs.some(music => music.trackId === trackId) : false;\n  }\n\n  render() {\n    // this.setMusics();\n    const {\n      musics,\n      favoriteSongs,\n      loading\n    } = this.state;\n    const image = musics[0].artworkUrl100;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-album\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), musics !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"album-name\",\n          children: musics[0].collectionName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"artist-name\",\n          children: musics[0].artistName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), musics.map(music => /*#__PURE__*/_jsxDEV(MusicCard, {\n          music: music,\n          favorites: favoriteSongs\n        }, music.trackId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this)), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 24\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nAlbum.propTypes = {\n  match: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/leonardo/Área de Trabalho/Repositorios/sd-016-b-project-trybetunes/src/pages/Album.jsx"],"names":["PropTypes","React","Component","Header","MusicCard","getMusics","getFavoriteSongs","Loading","Album","constructor","state","musics","undefined","loading","favoriteSongs","isFavorite","bind","componentDidMount","setStates","match","props","params","id","setState","favorites","trackId","some","music","render","image","artworkUrl100","collectionName","artistName","map","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport Loading from '../components/Loading';\n\nexport default class Album extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      musics: undefined,\n      loading: false,\n      favoriteSongs: [],\n    };\n    this.isFavorite = this.isFavorite.bind(this);\n    // this.setMusics = this.setMusics.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.setStates();\n  }\n\n  async setStates() {\n    const { match } = this.props;\n    const { params } = match;\n    const { id } = params;\n    const musics = await getMusics(id);\n\n    this.setState({\n      musics,\n    });\n\n    this.setState({\n      loading: true,\n    });\n\n    const favorites = await getFavoriteSongs();\n\n    this.setState({\n      favoriteSongs: favorites,\n      loading: false,\n    });\n  }\n\n  isFavorite(trackId) {\n    const { favoriteSongs } = this.state;\n    return favoriteSongs\n      ? favoriteSongs.some((music) => music.trackId === trackId)\n      : false;\n  }\n\n  render() {\n    // this.setMusics();\n    const { musics, favoriteSongs, loading } = this.state;\n    const image = musics[0].artworkUrl100;\n    return (\n      <div data-testid=\"page-album\">\n        <Header />\n        {musics !== undefined ? (\n          <div>\n            <img src={image}/>\n            <p data-testid=\"album-name\">\n              {musics[0].collectionName}\n            </p>\n            <p data-testid=\"artist-name\">{musics[0].artistName}</p>\n            {musics.map((music) => (\n              <MusicCard\n                music={music}\n                favorites={favoriteSongs}\n                key={music.trackId}\n              />\n            ))}\n            {loading ? <Loading /> : null}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  match: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}