{"ast":null,"code":"const FAVORITE_SONGS_KEY = 'favorite_songs';\nconst TIMEOUT = 500;\nconst SUCCESS_STATUS = 'OK';\n\nif (!JSON.parse(localStorage.getItem(FAVORITE_SONGS_KEY))) {\n  localStorage.setItem(FAVORITE_SONGS_KEY, JSON.stringify([]));\n}\n\nconst readFavoriteSongs = () => JSON.parse(localStorage.getItem(FAVORITE_SONGS_KEY));\n\nconst saveFavoriteSongs = favoriteSongs => localStorage.setItem(FAVORITE_SONGS_KEY, JSON.stringify(favoriteSongs)); // --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso futuramente.\n// --------------------------------------------------------------------\n\n\nconst simulateRequest = response => callback => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getFavoriteSongs = () => new Promise(resolve => {\n  console.log('favorte songs');\n  const favoriteSongs = readFavoriteSongs();\n  simulateRequest(favoriteSongs)(resolve);\n});\nexport const addSong = song => new Promise(resolve => {\n  if (song) {\n    const favoriteSongs = readFavoriteSongs();\n    saveFavoriteSongs([...favoriteSongs, song]);\n  }\n\n  simulateRequest(SUCCESS_STATUS)(resolve);\n});\nexport const removeSong = song => new Promise(resolve => {\n  const favoriteSongs = readFavoriteSongs();\n  saveFavoriteSongs(favoriteSongs.filter(s => s.trackId !== song.trackId));\n  simulateRequest(SUCCESS_STATUS)(resolve);\n});","map":{"version":3,"sources":["/home/leonardo/Área de Trabalho/Trybe/projects/sd-016-b-project-trybetunes/src/services/favoriteSongsAPI.js"],"names":["FAVORITE_SONGS_KEY","TIMEOUT","SUCCESS_STATUS","JSON","parse","localStorage","getItem","setItem","stringify","readFavoriteSongs","saveFavoriteSongs","favoriteSongs","simulateRequest","response","callback","setTimeout","getFavoriteSongs","Promise","resolve","console","log","addSong","song","removeSong","filter","s","trackId"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,gBAA3B;AACA,MAAMC,OAAO,GAAG,GAAhB;AACA,MAAMC,cAAc,GAAG,IAAvB;;AAEA,IAAI,CAACC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBN,kBAArB,CAAX,CAAL,EAA2D;AACzDK,EAAAA,YAAY,CAACE,OAAb,CAAqBP,kBAArB,EAAyCG,IAAI,CAACK,SAAL,CAAe,EAAf,CAAzC;AACD;;AACD,MAAMC,iBAAiB,GAAG,MAAMN,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBN,kBAArB,CAAX,CAAhC;;AAEA,MAAMU,iBAAiB,GAAIC,aAAD,IAAmBN,YAAY,CACtDE,OAD0C,CAClCP,kBADkC,EACdG,IAAI,CAACK,SAAL,CAAeG,aAAf,CADc,CAA7C,C,CAGA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,eAAe,GAAIC,QAAD,IAAeC,QAAD,IAAc;AAClDC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,QAAQ,CAACD,QAAD,CAAR;AACD,GAFS,EAEPZ,OAFO,CAAV;AAGD,CAJD;;AAMA,OAAO,MAAMe,gBAAgB,GAAG,MAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC7DC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAMT,aAAa,GAAGF,iBAAiB,EAAvC;AACAG,EAAAA,eAAe,CAACD,aAAD,CAAf,CAA+BO,OAA/B;AACD,CAJqC,CAA/B;AAMP,OAAO,MAAMG,OAAO,GAAIC,IAAD,IAAU,IAAIL,OAAJ,CAAaC,OAAD,IAAa;AACxD,MAAII,IAAJ,EAAU;AACR,UAAMX,aAAa,GAAGF,iBAAiB,EAAvC;AACAC,IAAAA,iBAAiB,CAAC,CAAC,GAAGC,aAAJ,EAAmBW,IAAnB,CAAD,CAAjB;AACD;;AACDV,EAAAA,eAAe,CAACV,cAAD,CAAf,CAAgCgB,OAAhC;AACD,CANgC,CAA1B;AAQP,OAAO,MAAMK,UAAU,GAAID,IAAD,IAAU,IAAIL,OAAJ,CAAaC,OAAD,IAAa;AAC3D,QAAMP,aAAa,GAAGF,iBAAiB,EAAvC;AACAC,EAAAA,iBAAiB,CAACC,aAAa,CAACa,MAAd,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcJ,IAAI,CAACI,OAA/C,CAAD,CAAjB;AACAd,EAAAA,eAAe,CAACV,cAAD,CAAf,CAAgCgB,OAAhC;AACD,CAJmC,CAA7B","sourcesContent":["const FAVORITE_SONGS_KEY = 'favorite_songs';\nconst TIMEOUT = 500;\nconst SUCCESS_STATUS = 'OK';\n\nif (!JSON.parse(localStorage.getItem(FAVORITE_SONGS_KEY))) {\n  localStorage.setItem(FAVORITE_SONGS_KEY, JSON.stringify([]));\n}\nconst readFavoriteSongs = () => JSON.parse(localStorage.getItem(FAVORITE_SONGS_KEY));\n\nconst saveFavoriteSongs = (favoriteSongs) => localStorage\n  .setItem(FAVORITE_SONGS_KEY, JSON.stringify(favoriteSongs));\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso futuramente.\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getFavoriteSongs = () => new Promise((resolve) => {\n  console.log('favorte songs');\n  const favoriteSongs = readFavoriteSongs();\n  simulateRequest(favoriteSongs)(resolve);\n});\n\nexport const addSong = (song) => new Promise((resolve) => {\n  if (song) {\n    const favoriteSongs = readFavoriteSongs();\n    saveFavoriteSongs([...favoriteSongs, song]);\n  }\n  simulateRequest(SUCCESS_STATUS)(resolve);\n});\n\nexport const removeSong = (song) => new Promise((resolve) => {\n  const favoriteSongs = readFavoriteSongs();\n  saveFavoriteSongs(favoriteSongs.filter((s) => s.trackId !== song.trackId));\n  simulateRequest(SUCCESS_STATUS)(resolve);\n});\n"]},"metadata":{},"sourceType":"module"}